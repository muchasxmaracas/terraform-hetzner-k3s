name: "Terraform Infrastructure Change Management Pipeline with GitHub Actions"

on:
  push:
    branches:
      - '**'

  pull_request:
    branches:
      - '**'

env:
  KUBECONFIG: $HOME/.kube/config
  TF_LOG: INFO
  TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
  TF_VAR_hcloud_ssh_public_key: ${{ secrets.HCLOUD_SSH_PUBLIC_KEY }}
  TF_VAR_hcloud_ssh_private_key: ${{ secrets.HCLOUD_SSH_PRIVATE_KEY }}
  TF_VAR_ssh_additional_public_keys: |
    [
      "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIBYt98G/lAhpNxBLY1JAGZcHSbMTuBJHwFFwMTkt/my sandro@sandros-MacBook-Pro.local",
      "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKC6jxq2Lbiwe4cjcB8itTmh4a6ldDR6KVGSM2PvrZwb sandro@DESKTOP-E6TGITL"
    ]
  TF_VAR_route53_hosted_zone_id: ${{ secrets.ROUTE53_HOSTED_ZONE_ID }}
  TF_VAR_base_domain: ${{ secrets.BASE_DOMAIN }}

  # GitHub OAuth App variables for Rancher
  TF_VAR_github_client_id: ${{ secrets.GH_CLIENT_ID }}
  TF_VAR_github_client_secret: ${{ secrets.GH_CLIENT_SECRET }}

jobs:
  terraform:
    name: "Terraform Infrastructure Change Management"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: ./

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v2

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.13.0
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform init
        id: init
        run: |
          terraform init \
            -backend-config=access_key=${{ secrets.HCLOUD_S3_ACCESS_KEY }} \
            -backend-config=secret_key=${{ secrets.HCLOUD_S3_SECRET_KEY }}
      
      - name: Install dos2unix for fix (https://github.com/kube-hetzner/terraform-hcloud-kube-hetzner/discussions/1180#discussioncomment-10096101)
        run: |
          sudo apt-get update
          sudo apt-get install dos2unix
          find .terraform -type f -print0 | xargs -0 dos2unix

      - name: Terraform format
        id: fmt
        run: terraform fmt

      - name: Terraform format check
        id: fmt-check
        run: terraform fmt -check

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: |
          export TF_VAR_hcloud_s3_access_key=${{ secrets.HCLOUD_S3_ACCESS_KEY }}
          export TF_VAR_hcloud_s3_secret_key=${{ secrets.HCLOUD_S3_SECRET_KEY }}
          terraform plan
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          script: |
            // Helper to convert Terraform step outcome to emoji
            const emoji = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'skipped': return '⚠️';
                default: return '❓';
              }
            };

            const output = `### Terraform CI Summary

            **Format & Style:** ${emoji('${{ steps.fmt-check.outcome }}')} \`${{ steps.fmt-check.outcome }}\`  
            **Initialization:** ${emoji('${{ steps.init.outcome }}')} \`${{ steps.init.outcome }}\`  
            **Validation:** ${emoji('${{ steps.validate.outcome }}')} \`${{ steps.validate.outcome }}\`  
            **Plan:** ${emoji('${{ steps.plan.outcome }}')} \`${{ steps.plan.outcome }}\`  

            <details>
            <summary>Show Terraform Plan</summary>

            \`\`\`
            ${process.env.PLAN}
            \`\`\`
            </details>

            *Pushed by @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                  });

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          export TF_VAR_hcloud_s3_access_key=${{ secrets.HCLOUD_S3_ACCESS_KEY }}
          export TF_VAR_hcloud_s3_secret_key=${{ secrets.HCLOUD_S3_SECRET_KEY }}
          terraform apply -auto-approve -input=false
      
      # - name: Get and fix kubeconfig
      #   run: |
      #     mkdir -p $HOME/.kube
      #     # Get the kubeconfig output as JSON, then use jq to extract the string value
      #     # and pipe it to yq to edit the server address.
      #     terraform output -json kubeconfig | jq -r '.' | yq '.clusters[0].cluster.server = "https://api.baphomet.cloud:6443"' > $HOME/.kube/config
      #     chmod 600 $HOME/.kube/config
      #   env:
      #     KUBECONFIG: $HOME/.kube/config

      # - name: Create Route53 secret in Kubernetes
      #   run: |
      #     kubectl -n cert-manager create secret generic route53-acme-secret \
      #       --from-literal=aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }} \
      #       --from-literal=aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
      #       --dry-run=client -o yaml | kubectl apply -f -
      #   env:
      #     KUBECONFIG: $HOME/.kube/config
