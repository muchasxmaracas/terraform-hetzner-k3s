name: "Terraform Infrastructure Change Management Pipeline with GitHub Actions"

on:
  push:
    branches:
      - '**' # This will run on all pushes to any branch

  pull_request:
    branches:
      - '**' # This will run on all pull requests from any branch

env:
  # verbosity setting for Terraform logs
  TF_LOG: INFO
  
  TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}

  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  TF_VAR_ssh_public_key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKC6jxq2Lbiwe4cjcB8itTmh4a6ldDR2KVGSM2PvrZwb sandro@DESKTOP-E6TGITL"
  TF_VAR_ssh_additional_public_key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIBYt98G/lAhpNxBLY1JAGZcHSbMTuBJHwFFwMTkt/my sandro@sandros-MacBook-Pro.local"

  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # S3 bucket for the Terraform state
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }} 

jobs:
  terraform:
    name: "Terraform Infrastructure Change Management"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: ./

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v2

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.13.0

      - name: Terraform init
        id: init
        run: |
          terraform init \
            -backend-config=bucket=baphomet \
            -backend-config=key=terraform.tfstate \
            -backend-config=region=hel1 \
            -backend-config=endpoint=https://hel1.your-objectstorage.com \
            -backend-config=skip_metadata_api_check=true \
            -backend-config=use_path_style=true \
            -backend-config=skip_region_validation=true \
            -backend-config=skip_credentials_validation=true \
            -backend-config=skip_requesting_account_id=true

      - name: Terraform format
        id: fmt
        run: terraform fmt

      - name: Terraform format check
        id: fmt-check
        run: terraform fmt -check

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        # Removed the 'if' condition so this step always runs
        run: |
          terraform plan \
             -var "ssh_private_key=${{ secrets.SSH_PRIVATE_KEY }}"
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`

            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`

            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n

            ${process.env.PLAN}

            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({

              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve -input=false \
            -var "ssh_private_key=${{ secrets.SSH_PRIVATE_KEY }}"