name: "Terraform Infrastructure Change Management Pipeline with GitHub Actions"

on:
  push:
    branches:
      - '**'

  pull_request:
    branches:
      - '**'

env:
  TF_LOG: INFO
  
  TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}

  # Note: The SSH_PRIVATE_KEY is passed directly in the 'run' steps
  TF_VAR_ssh_public_key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKC6jxq2Lbiwe4cjcB8itTmh4a6ldDR6KVGSM2PvrZwb sandro@DESKTOP-E6TGITL"
  TF_VAR_ssh_additional_public_keys: |
    [
      "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKC6jxq2Lbiwe4cjcB8itTmh4a6ldDR6KVGSM2PvrZwb sandro@DESKTOP-E6TGITL",
      "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIBYt98G/lAhpNxBLY1JAGZcHSbMTuBJHwFFwMTkt/my sandro@sandros-MacBook-Pro.local"
    ]
  # Terraform Variables for Route53
  TF_VAR_route53_hosted_zone_id: ${{ secrets.ROUTE53_HOSTED_ZONE_ID }}
  TF_VAR_base_domain: ${{ secrets.BASE_DOMAIN }}

jobs:
  terraform:
    name: "Terraform Infrastructure Change Management"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: ./

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v2

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.13.0
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Or your desired region for Route53

      - name: Terraform init
        id: init
        run: |
          terraform init \
            -backend-config=access_key=${{ secrets.HCLOUD_S3_ACCESS_KEY }} \
            -backend-config=secret_key=${{ secrets.HCLOUD_S3_SECRET_KEY }}
        env:
          # Note: The AWS credentials for the backend-config flag must be set as environment variables.
          # Here we'll map them from the github secrets.
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform format
        id: fmt
        run: terraform fmt

      - name: Terraform format check
        id: fmt-check
        run: terraform fmt -check

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        # Removed the 'if' condition so this step always runs
        run: |
          export TF_VAR_hcloud_s3_access_key=${{ secrets.HCLOUD_S3_ACCESS_KEY }}
          terraform plan \
            -var "ssh_private_key=${{ secrets.SSH_PRIVATE_KEY }}"
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`

            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`

            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n

            ${process.env.PLAN}

            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          export TF_VAR_hcloud_s3_access_key=${{ secrets.HCLOUD_S3_ACCESS_KEY }}
          terraform apply -auto-approve -input=false \
            -var "ssh_private_key=${{ secrets.SSH_PRIVATE_KEY }}"